# Path for built products
ARTIFACTS_PATH = artifacts

# Path for dSYMs
DSYMS_PATH = $(ARTIFACTS_PATH)/dsyms

# Path for built archives
ARCHIVES_PATH = $(ARTIFACTS_PATH)/archives

# Path for built IPAs
IPAS_PATH = $(ARTIFACTS_PATH)/ipas

# Provisioning profiles dir
PROFILES_DIR = $(CURDIR)/profiles

# Temporary build dir
TEMP_DIR = $(CURDIR)/tmp

# Build environment vars
CONFIGURATION_BUILD_DIR = $(TEMP_DIR)/configuration

BUILD_ENV_OPTIONS = SHARED_PRECOMPS_DIR="$(TEMP_DIR)/precomps" \
		TARGET_TEMP_DIR="$(TEMP_DIR)/target/" \
		CONFIGURATION_BUILD_DIR="$(CONFIGURATION_BUILD_DIR)"

# Archives
ARCHIVES = <% config["archives"].each do |archive| %>$(ARCHIVES_PATH)/<%= archive["name"] %>.xcarchive <% end %>

# IPAs
IPAS = <% config["ipas"].each do |ipa| %>$(IPAS_PATH)/<%= ipa["name"] %>.ipa <% end %>

# Get current version
CURRENT_VERSION=$(shell agvtool what-version -terse)

# If build number if defined and it's different than the current build number
# add update-version step to be used for all target
ifdef BUILD_NUMBER
UPDATE_VERSION = update-version
else
UPDATE_VERSION=
endif

# Create profiles directory
$(PROFILES_DIR):
	mkdir $@

# Install provisioning profiles
install-profiles: $(PROFILES_DIR)
	rsync -av ./profiles/ ~/Library/MobileDevice/Provisioning\ Profiles/

# Updates project version if needed and generates all IPAs
all: $(UPDATE_VERSION) $(IPAS)

# Updates project version using agvtool
update-version:
	agvtool new-version -all $(CURRENT_VERSION).$(BUILD_NUMBER)

<% config["archives"].each do |archive| -%>
# Create <%=archive["name"]%>.xcarchive
$(ARCHIVES_PATH)/<%=archive["name"]%>.xcarchive:
	xcodebuild archive $(BUILD_ENV_OPTIONS) \
		-scheme "<%=archive["scheme"]%>" \
		<% if archive["workspace"] -%>-workspace "<%= archive["workspace"] %>.xcworkspace" \
		<% end -%>
		<% if archive["project"] -%>-project "<%= archive["project"] %>.xcodeproj" \
		<% end -%>
		-configuration "<%=archive["configuration"]%>"  \
		-archivePath $@
	mkdir -p "$(DSYMS_PATH)/<%=archive["name"]%>"
	cp -r "$(CONFIGURATION_BUILD_DIR)/"*".dSYM" "$(DSYMS_PATH)/<%=archive["name"]%>/"
	rm -rf $(TEMP_DIR)

<% end -%>
# Path to built IPAs
$(IPAS_PATH):
	mkdir -p $(IPAS_PATH)

<% config["ipas"].each do |ipa| -%>
# Create <%=ipa["name"]%>.ipa
$(IPAS_PATH)/<%=ipa["name"]%>.ipa: $(IPAS_PATH) $(ARCHIVES_PATH)/<%=ipa["archive"]%>.xcarchive
	xcodebuild -exportArchive \
		-exportFormat IPA \
		-exportProvisioningProfile "<%=ipa["profile"]%>" \
		-archivePath "$(ARCHIVES_PATH)/<%=ipa["archive"]%>.xcarchive" \
		-exportPath "$@"

<% end -%>
<% if config["distributions"] != nil -%>
# Run all distribution tasks
distribute-all: <% config["distributions"].each do |distribution| %>distribute-<%= distribution["name"] %> <% end %>

<% config["distributions"].each do |distribution| -%>
<% if distribution["type"] == "testflight" -%>
# Upload <%=distribution["ipa"]%>.ipa to <%=distribution["type"]%>
distribute-<%= distribution["name"] %>:
	curl http://testflightapp.com/api/builds.json \
		-F file=@'$(IPAS_PATH)/<%= distribution["ipa"] %>.ipa' \
		-F api_token='<%= distribution["api-token"] %>' \
		-F notes='<%= distribution["notes"] %>' \
		-F team_token='<%= distribution["team-token"] %>' \
		-F notify='<%= distribution["notify"].to_s %>' \
		-F distribution_lists='<%= distribution["distribution-list"] %>'
<% end -%>

<% end -%>
<% end -%>
# Clean artifacts and temp directories
clean:
	rm -rf $(ARTIFACTS_PATH)
	rm -rf $(TEMP_DIR)
